/******************************************************************
Stylesheet: Mixins & Constants
******************************************************************/

@mixin box-sizing {
    -moz-box-sizing: border-box; 
    -webkit-box-sizing: border-box; 
    box-sizing: border-box; 
}

@mixin transition-1 {
    -webkit-transition: background-color 250ms linear;
    -moz-transition: background-color 250ms linear;
    -o-transition: background-color 250ms linear;
    -ms-transition: background-color 250ms linear;
    transition: background-color 250ms linear;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin media-upto-625 {
    @media only screen and (max-width: 625px) {
        @content;
    }
}

@mixin media-upto-768 {
    @media only screen and (max-width: 768px) {
        @content;
    }
}

@mixin media-upto-800 {
    @media only screen and (max-width: 800px) {
        @content;
    }
}

@mixin media-upto-990 {
    @media only screen and (max-width: 990px) {
        @content;
    }
}


// imported from M4C theme

@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/// https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/
@mixin aspect-ratio($width, $height) {
  position: relative;
  
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}



// https://codepen.io/jordyvg/pen/PByqap
@mixin ratio($width, $height) {
  min-height: calc((#{$height} / #{$width}) * 100vw);
}



//breakpoints
/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}



// typography, using mixins so the styles can be called within media queries â€“ please refer to base/typography 


@mixin in-depth_left {
  float: left;
  width: 16%;
  margin-top: 7px;
}


@mixin border-styles {
  border-width: 2px;
  border-style: solid;
}


@mixin light-fill {
  @include border-styles;
  border-color: $colour_M4C-wireframe-dark;
  color: $colour_M4C-wireframe-dark;
  background-color: white; 
}